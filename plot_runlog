#! /usr/bin/env python3
""" docstring """

import argparse
import sys
import matplotlib
import matplotlib.pyplot as plt
import dcatools as tools

matplotlib.use("Agg")
plt.rcParams["figure.figsize"] = [13.5, 24]
plt.rcParams.update({"mathtext.default": "regular"})


def parse_options():
    """cli parser"""
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "-i",
        "--input",
        dest="input",
        action="append",
        required=True,
        help="run log file",
    )
    parser.add_argument(
        "-d",
        "--description",
        dest="description",
        action="append",
        required=False,
        help="run log file",
    )
    parser.add_argument(
        "-o",
        "--output",
        dest="output",
        required=True,
        help="figure name",
    )
    parser.add_argument(
        "-s",
        "--start",
        dest="start",
        default=0,
        type=int,
        required=False,
        help="start offset",
    )
    parser.add_argument(
        "-e",
        "--end",
        dest="end",
        type=int,
        required=False,
        help="end step",
    )
    return parser.parse_args()


def main():
    """do stuff"""
    options = parse_options()

    suffixes = []
    if options.description:
        if len(options.input) != len(options.description):
            sys.exit("Mismatched number of inputs and description strings.")
        suffixes = options.description
    else:
        suffixes = [
            item.rstrip("bmdca_run.log").rstrip("/") for item in options.input
        ]

    df_list = []
    for item in options.input:
        if options.end is not None:
            df = tools.load_run_log(item, int(options.start), int(options.end))
        else:
            df = tools.load_run_log(item, int(options.start))
        df_list.append(df)

    # collect fields
    wants = [
        "log10-burn-between",
        "log10-burn-in",
        "energy-err",
        "total-corr",
        "auto-corr",
        "cross-corr",
        "log10-train-err-tot",
        "log10-train-err-1p",
        "log10-train-err-2p",
        #  "train-err-tot",
        #  "train-err-1p",
        #  "train-err-2p",
        #  "validate-err-tot",
        #  "validate-err-1p",
        #  "validate-err-2p",
        "diff-avg-energy",
        "duration",
    ]

    # subset the 'wants' fields by the fields actually present in the run logs
    all_fields = set()
    for df in df_list:
        if len(all_fields) == 0:
            all_fields = set(df.columns)
        else:
            all_fields = all_fields & set(df.columns)
    all_fields = list(all_fields)
    fields = [field for field in wants if field in all_fields]

    # check df lengths
    min_steps = min([len(df) for df in df_list])
    max_steps = max([len(df) for df in df_list])

    if min_steps != max_steps:
        print("WARNING: subsetting due to different step counts...")
        for i in range(0, len(df_list)):
            df_list[i] = df_list[i].iloc[0:min_steps, 0:]

    with plt.style.context("fivethirtyeight"):
        styles = ["-", "--", "-.", ":"]
        n_styles = len(styles)
        for idx, df in enumerate(df_list):
            if idx == 0:
                ax = df.plot(
                    x="step",
                    y=fields,
                    label=[f + " " + suffixes[idx] for f in fields],
                    linewidth=1.0,
                    subplots=True,
                    linestyle=styles[idx % n_styles],
                )
            else:
                df.plot(
                    x="step",
                    y=fields,
                    label=[f + " " + suffixes[idx] for f in fields],
                    linewidth=1.0,
                    subplots=True,
                    ax=ax,
                    linestyle=styles[idx % n_styles],
                )
        plt.tight_layout()
        plt.savefig(options.output)


if __name__ == "__main__":
    main()

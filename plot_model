#! /usr/bin/env python3
""" docstring """

import argparse
import os
import sys
import subprocess
import numpy as np
import pandas as pd
import matplotlib

import dcatools as tools

matplotlib.use("Agg")
import matplotlib.pyplot as plt

plt.rcParams.update({"mathtext.default": "regular"})


def parse_options():
    """ cli parser """
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "-s",
        "--step",
        dest="step",
        help="steps",
    )
    parser.add_argument(
        "-i",
        "--input",
        dest="input",
        required=False,
        help="input",
    )
    parser.add_argument(
        "-I",
        "--input2",
        dest="input2",
        required=False,
        help="input2",
    )
    parser.add_argument(
        "-d",
        "--dir",
        dest="dir",
        required=False,
        help="directory",
    )
    parser.add_argument(
        "-l",
        "--label",
        dest="label",
        required=False,
        help="label",
    )
    parser.add_argument(
        "-t",
        "--title",
        dest="title",
        required=False,
        help="figure title",
    )
    parser.add_argument(
        "-p",
        "--plot_parameters",
        dest="params",
        action="store_true",
        default=False,
        help="compare param flag",
    )
    parser.add_argument(
        "-g",
        "--plot_gradient",
        dest="grad",
        action="store_true",
        default=False,
        help="compare gradient flag",
    )
    parser.add_argument(
        "-r",
        "--plot_learning_rates",
        dest="learn",
        action="store_true",
        default=False,
        help="compare learn rates flag",
    )
    parser.add_argument(
        "-m",
        "--plot_moments",
        dest="moment",
        action="store_true",
        default=False,
        help="compare moments flag",
    )
    parser.add_argument(
        "-v",
        "--vertical",
        dest="vertical",
        action="store_true",
        default=False,
        help="orient plots vertically",
    )
    parser.add_argument(
        "-c",
        "--cleanup",
        dest="cleanup",
        action="store_true",
        default=False,
        help="delete intermediate files",
    )
    parser.add_argument(
        "-b",
        "--bins",
        dest="bins",
        default=51,
        help="orient plots vertically",
    )
    return parser.parse_args()


def load_histogram_1d(filename, names):
    """ load histogram grid and counts """
    data_df = pd.read_csv(
        filename,
        sep="\t",
        names=names,
        dtype={
            names[0]: np.float64,
            names[1]: np.int64,
        },
    )
    return data_df


def cleanup(filenames):
    """ delete list of files """
    for f in filenames:
        os.remove(f[1])
        os.remove(f[2])


def main():
    """ do stuff """
    options = parse_options()

    if options.step is not None:
        step = int(options.step)
        infile = None
    elif options.input is not None:
        infile = options.input
        if options.input2 is not None:
            infile2 = options.input2
        else:
            infile2 = None

    if options.dir is not None:
        if os.path.isdir(options.dir):
            indir = options.dir
        else:
            sys.exit("Missing directory. Exiting...")
    else:
        indir = ""

    if options.label is not None:
        label = options.label
        if options.step is not None:
            prefix = tools.slugify(options.label)
        else:
            prefix = tools.slugify(options.label)
    elif options.step is not None:
        prefix = str(options.step)
        label = "step " + str(options.step)

    if options.title is not None:
        title = options.title
        title_prefix = tools.slugify(title) + "_model_"
    elif options.label is not None:
        title = options.label
        title_prefix = ""

    if (
        options.grad is False
        and options.params is False
        and options.learn is False
        and options.moment is False
    ):
        if infile is None:
            sys.exit("Gotta plot something...")

    subplots = []

    if infile is not None:
        command = ["compute_histogram", "-p", infile]

        if infile2 is not None:
            command.append("-P")
            command.append(infile2)

        res = subprocess.call(command)
        if res != 0:
            sys.exit("Error generating input histograms. Exiting...")

        if infile2 is not None:
            infile_h = ".".join(infile.split(".")[0:-1]) + "_hist.tsv"
            infile_J = ".".join(infile2.split(".")[0:-1]) + "_hist.tsv"
        else:
            tmp = ".".join(infile.split(".")[0:-1])
            tmp = tmp.split("_")
            infile_h = "_".join(tmp[0:-1]) + "_h_" + tmp[-1] + "_hist.tsv"
            infile_J = "_".join(tmp[0:-1]) + "_J_" + tmp[-1] + "_hist.tsv"

        subplots.append(("values", infile_h, infile_J))
    else:
        if options.params:
            param_h = os.path.join(indir, "parameters_h_" + str(step) + "_hist.tsv")
            param_J = os.path.join(indir, "parameters_J_" + str(step) + "_hist.tsv")
            subplots.append(("parameters", param_h, param_J))

            command = ["compute_histogram",
                       "-p", "parameters_h_" + str(step) + ".bin",
                       "-P", "parameters_J_" + str(step) + ".bin"]
            res = subprocess.call(command)
            if res != 0:
                sys.exit("Error generating gradient histograms. Exiting...")

        if options.grad:
            grad_h = os.path.join(indir, "gradients_h_" + str(step) + "_hist.tsv")
            grad_J = os.path.join(indir, "gradients_J_" + str(step) + "_hist.tsv")
            subplots.append(("gradient", grad_h, grad_J))

            command = ["compute_histogram",
                       "-p", "gradients_h_" + str(step) + ".bin",
                       "-P", "gradients_J_" + str(step) + ".bin"]
            res = subprocess.call(command)
            if res != 0:
                sys.exit("Error generating gradient histograms. Exiting...")

        if options.learn:
            learn_h = os.path.join(indir, "learning_rates_h_" + str(step) + "_hist.tsv")
            learn_J = os.path.join(indir, "learning_rates_J_" + str(step) + "_hist.tsv")
            subplots.append(("learning rate", learn_h, learn_J))

            command = ["compute_histogram",
                       "-p", "learning_rates_h_" + str(step) + ".bin",
                       "-P", "learning_rates_J_" + str(step) + ".bin"]
            res = subprocess.call(command)
            if res != 0:
                sys.exit("Error generating learning rate histograms. Exiting...")

        if options.moment:
            moment1_h = os.path.join(indir, "moment1_h_" + str(step) + "_hist.tsv")
            moment1_J = os.path.join(indir, "moment1_J_" + str(step) + "_hist.tsv")
            subplots.append(("moment 1", moment1_h, moment1_J))

            command = ["compute_histogram",
                       "-p", "moment1_h_" + str(step) + ".bin",
                       "-P", "moment1_J_" + str(step) + ".bin"]
            res = subprocess.call(command)
            if res != 0:
                sys.exit("Error generating moment 1 histograms. Exiting...")

    subplots_count = len(subplots)

    with plt.style.context("fivethirtyeight"):
        if options.vertical:
            fig = plt.figure(figsize=[20, 8 * subplots_count])
        else:
            fig = plt.figure(figsize=[8 * subplots_count, 14])
        axes = fig.add_subplot(111)
        axes.tick_params(
            axis="both",
            which="both",
            labelcolor="none",
            top=False,
            bottom=False,
            left=False,
            right=False,
        )
        axes.grid(False)
        axes.set_title(title, pad=25)
        axes.set_xlabel(
            label, fontsize=plt.rcParams["axes.titlesize"], x=0.475, y=0
        )
        if options.vertical:
            axes.yaxis.labelpad = 20

        for idx, s in enumerate(subplots):
            df_h = load_histogram_1d(filename=s[1], names=["h " + s[0], "Count"])
            df_J = load_histogram_1d(filename=s[2], names=["J " + s[0], "Count"])

            if options.vertical:
                ax = fig.add_subplot(
                    int(str(subplots_count) + "2" + str(2 * idx + 1))
                )
            else:
                ax = fig.add_subplot(
                    int("2" + str(subplots_count) + str(idx + 1))
                )

            ax.hist(
                x=df_h["h " + s[0]],
                weights=df_h["Count"],
                alpha=0.5,
                bins=options.bins,
                zorder=1,
            )
            ax.set_title(
                s[0] + " h",
                fontsize=plt.rcParams["axes.titlesize"],
            )

            if options.vertical:
                ax = fig.add_subplot(
                    int(str(subplots_count) + "2" + str(2 * idx + 2))
                )
            else:
                ax = fig.add_subplot(
                    int(
                        "2"
                        + str(subplots_count)
                        + str(idx + 1 + subplots_count)
                    )
                )

            ax.hist(
                x=df_J["J " + s[0]],
                weights=df_J["Count"],
                alpha=0.5,
                bins=options.bins,
                zorder=1,
            )
            ax.set_title(
                s[0] + " J",
                fontsize=plt.rcParams["axes.titlesize"],
            )
            #  ax.set_yscale('log')

        fig.tight_layout()
        fig.savefig(title_prefix + prefix + ".png")

    if options.cleanup:
        cleanup(subplots)

if __name__ == "__main__":
    main()

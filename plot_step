#! /bin/bash
set -eu

function make_figures() {
  local name="$1"
  local description="$2"
  local title="$name, $description"

  local slug
  slug="$(echo "$name, $description" | \
          sed -r s/λ/l/g | \
          sed -r s/α/a/g | \
          sed -r s/β/b/g | \
          sed -r s/γ/g/g | \
          iconv -t ascii//TRANSLIT | \
          sed -r s/[~\^]+//g | \
          sed -r s/[^a-zA-Z0-9]+/_/g | \
          sed -r s/^-+\|-+$//g | \
          tr "[:upper:]" "[:lower:]")"

  local step="$3"
  local nproc="$4"
  local pdb="$5"
  local chain="$6"
  local validation="$7"

  local between=0.8
  local within=0.8

  export OMP_NUM_THREADS="$nproc"

  local cpulist=0
  for i in $(seq 2 1 "$nproc"); do
    cpulist="${cpulist},${i}"
  done

  local prev_step
  if ls -t samples_stat_2p_[0-9]*.bin >/dev/null; then
    for i in $(ls -t samples_stat_2p_[0-9]*.bin | \
                 cut -d "_" -f4 | cut -d"." -f1); do
      if [[ "$i" -lt "$step" ]]; then
        prev_step="$i"
        break
      fi
    done
  else
    echo "ERROR: bmDCA output files not found."
    exit 3
  fi

  if ! [ -f bmdca_run.log ]; then
    echo "ERROR: missing bmDCA run log."
    exit 3
  fi

  echo "plotting step $step"

  echo "run log"
  plot_runlog -i bmdca_run.log -o "${slug}_runlog.png"
  echo

  echo "stats comparison"
  plot_msa_compare \
    -n msa_numerical.txt \
    -w msa_weights.txt \
    -N "samples_${step}.txt" \
    -l "MSA" \
    -L "Samples" \
    -T "${title}, step ${step}" -p 3 -c

  echo "pca projection"
  taskset --cpu-list "$cpulist" plot_msa_proj \
    -n msa_numerical.txt \
    -w msa_weights.txt \
    -N "samples_${step}.txt" \
    -t "${title}, step ${step}" \
    -o "${slug}_proj_${step}.png" -b
  echo

  echo "sequence energies"
  taskset --cpu-list "$cpulist" plot_energy.py \
    -e "msa_energies_${step}.txt" \
    -e "energies_${step}.txt" \
    -l "msa" \
    -l "samples" \
    -t "${title}, step ${step}" \
    -o "${slug}_energy_${step}.png"
  echo

  if [[ -f "${validation}" ]]; then
    echo "validation alignment energies"
    taskset --cpu-list "$cpulist" plot_energy.py \
      -e "msa_energies_${step}.txt" \
      -e "msa_energies_validate_${step}.txt" \
      -l "msa (training)" \
      -l "msa (validation)" \
      -t "${title}, step ${step}" \
      -o "${slug}_energy_validation_${step}.png"
    echo
  fi

  echo "model parameters"
  plot_model \
    -s "$step" \
    -l "step $step" \
    -t "$title" -p -g -v -c
  echo

  echo "compare sequence similarities"
  taskset --cpu-list "$cpulist" plot_distances \
    -n msa_numerical.txt \
    -l "msa" \
    -N "samples_${step}.txt" \
    -L "samples" \
    -T "${title}, step ${step}" -c
  echo

  echo "subset dissimilar sequences"
  subset_alignment \
    -n "samples_${step}.txt" \
    -N msa_numerical.txt \
    -b "${between}" \
    -w "${within}" \
    -o "samples_${step}_subset.txt"
  if [ "$(wc -l "samples_${step}_subset.txt" | cut -d" " -f1)" -gt 1 ]
  then
    compute_energies \
      -n "samples_${step}_subset.txt" \
      -p "parameters_h_${step}.bin" \
      -P "parameters_J_${step}.bin" \
      -o "energies_${step}_subset.txt"
    taskset --cpu-list "$cpulist" plot_energy.py \
      -e "msa_energies_${step}.txt" \
      -e "energies_${step}.txt" \
      -e "energies_${step}_subset.txt" \
      -l "msa" \
      -l "samples" \
      -l "samples subset" \
      -t "${title} subset (b=${between} w=${within}), step ${step}" \
      -o "${slug}_energy_${step}_subset.png"
    taskset --cpu-list "$cpulist" plot_msa_proj \
      -n msa_numerical.txt \
      -w msa_weights.txt \
      -N "samples_${step}_subset.txt" \
      -t "${title}, subset (b=${between} w=${within}), step ${step}" \
      -o "${slug}_proj_${step}_subset.png" -b
    plot_msa_compare \
      -n msa_numerical.txt \
      -w msa_weights.txt \
      -N "samples_${step}_subset.txt" \
      -l "MSA" \
      -L "Samples Subset" \
      -T "${title}, subset (b=${between} w=${within}), step ${step}" -p 3 -c
    # taskset --cpu-list "$cpulist" plot_distances \
    #   -n msa_numerical.txt \
    #   -l "msa" \
    #   -N "samples_subset_${step}.txt" \
    #   -L "samples subset" \
    #   -T "${title}, subset (b=${between} w=${within}), step ${step}" -c
  fi
  echo

  if [[ "$pdb" != "none" ]]; then
    echo "compute contact map"
    compute_zero_gauge -g \
      -p "parameters_h_${step}.bin" \
      -P "parameters_J_${step}.bin"
    taskset --cpu-list "$cpulist" plot_contacts \
      -p "parameters_h_${step}_zg.bin" \
      -P "parameters_J_${step}_zg.bin" \
      -b "$pdb" \
      -c "$chain" \
      -n "msa_numerical.txt" \
      -t "${title}, step ${step}"
    echo
  fi

  if [[ -v prev_step ]]; then
    echo "previous model comparison"
    taskset --cpu-list "$cpulist" plot_model_compare \
      -s "$prev_step" \
      -s "$step" \
      -l "step $prev_step" \
      -l "step $step" \
      -t "$title" -p -g -v -c
    echo

    echo "sequence energy comparisons"
    compute_energies \
      -n "msa_numerical.txt" \
      -p "parameters_h_${prev_step}.bin" \
      -P "parameters_J_${prev_step}.bin" \
      -o "msa_energies_${prev_step}.txt"

    taskset --cpu-list "$cpulist" plot_energy_compare.py \
      -e "msa_energies_${prev_step}.txt" \
      -e "msa_energies_${step}.txt" \
      -l "samples step $prev_step" \
      -l "samples step $step" \
      -t "${title}, step ${prev_step} vs step ${step}" \
      -o "${slug}_energy_compare_${prev_step}-vs-${step}.png"
  fi
  echo
}

function get_step() {
  local STEP
  STEP=$(wc -l bmdca_run.log | cut -d" " -f1)
  echo $(( STEP - 1 ))
}

#
# Parse command line options
#

OPTIONS=t:d:s:n:p:c:v:
LONGOPTIONS=title:,description:,step:,nproc:,pdb:,chain:,validation
PARSED=$(getopt -o ${OPTIONS} --long ${LONGOPTIONS} -n "$0" -- "$@")
eval set -- "$PARSED"
while [ $# -ge 1 ]; do
  case "$1" in
    -t|--title)
      TITLE="${2}"
      shift 2
      ;;
    -d|--description)
      DESCRIPTION="${2}"
      shift 2
      ;;
    -s|--step)
      STEP="${2}"
      shift 2
      ;;
    -n|--nproc)
      NPROC="${2}"
      shift 2
      ;;
    -p|--pdb)
      PDB="${2}"
      shift 2
      ;;
    -c|--chain)
      CHAIN="${2}"
      shift 2
      ;;
    -v|--validation)
      VALIDATION="${2}"
      shift 2
      ;;
    --)
      shift
      break
      ;;
    *)
      show_error "ERROR: unknown command line option."
      print_usage
      exit 3
      ;;
  esac
done

if ! [[ -v STEP ]]; then
  STEP="$(get_step)"
else
  CHECK_STEP="$(get_step)"
  if [ "${STEP}" -gt "${CHECK_STEP}" ]; then
    echo "ERROR: step $STEP has not been reached."
    exit
  fi
fi

if ! [[ -v NPROC ]]; then
  NPROC=$(nproc)
fi

if ! [[ -v PDB ]]; then
  PDB="none"
fi

if ! [[ -v CHAIN ]]; then
  CHAIN="A"
fi

if ! [[ -v VALIDATION ]]; then
  VALIDATION="msa_numerical_validate.txt"
fi

make_figures \
  "$TITLE" "$DESCRIPTION" "$STEP" "$NPROC" "$PDB" "$CHAIN" "$VALIDATION"

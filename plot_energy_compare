#!/usr/bin/env python3

# SPDX-FileCopyrightText: 2020 - 2023 sudorook <daemon@nullcodon.com>
#
# SPDX-License-Identifier: GPL-3.0-or-later
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
# for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program. If not, see <https://www.gnu.org/licenses/>.

""" docstring """

import argparse
import sys
import numpy as np
import matplotlib
import matplotlib.pyplot as plt
import pandas as pd
import statsmodels.formula.api as sm
import dcatools as tools

matplotlib.use("Agg")
plt.rcParams["figure.figsize"] = [12, 10]
plt.rcParams.update({"mathtext.default": "regular"})


def parse_options():
    """cli parser"""
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "-n",
        "--msa",
        dest="msa",
        action="append",
        required=False,
        help="numerical msa file(s)",
    )
    parser.add_argument(
        "-e",
        "--energies",
        dest="energies",
        action="append",
        required=False,
        help="msa energy file(s)",
    )
    parser.add_argument(
        "-p",
        "--parameters",
        dest="params",
        required=False,
        help="msa energy file(s)",
    )
    parser.add_argument(
        "-l",
        "--labels",
        dest="labels",
        action="append",
        required=True,
        help="labels",
    )
    parser.add_argument(
        "-t", "--title", dest="title", required=False, help="title"
    )
    parser.add_argument(
        "-d",
        "--description",
        dest="description",
        required=False,
        help="additional information",
    )
    parser.add_argument(
        "-o", "--output", dest="output", required=True, help="output file name"
    )
    parser.add_argument(
        "-m",
        "--offset_mode",
        dest="mode",
        default=0,
        help="offset type (default none)",
    )
    parser.add_argument(
        "-s",
        "--sort",
        dest="sort",
        action="store_true",
        default=False,
        help="sort energies before comparing",
    )
    return parser.parse_args()


def main():
    """do stuff"""
    options = parse_options()

    if options.energies is not None:
        energies = [
            tools.load_energies(msa_file) for msa_file in options.energies
        ]
    elif options.msa is not None and options.params is not None:
        h, J = tools.load_model(options.params)
        energies = [
            tools.compute_energies(tools.load_sequences(msa_file), h, J)
            for msa_file in options.msa
        ]
    else:
        sys.exit("ERROR: missing input data")

    if len(energies) != 2:
        sys.exit("ERROR: only comparison of 2 energies supported.")

    if options.sort:
        df_e = pd.DataFrame(
            data={
                "e1": np.sort(energies[0]),
                "e2": np.sort(energies[1]),
            }
        )
    else:
        df_e = pd.DataFrame(
            data={
                "e1": energies[0],
                "e2": energies[1],
            }
        )
    res_e = sm.ols(formula="e2 ~ e1", data=df_e).fit()
    params_e = res_e.params

    with plt.style.context("fivethirtyeight"):
        fig, ax = plt.subplots(1, 1)

        ax.scatter(x=energies[0], y=energies[1], color="midnightblue", s=5)
        x = np.linspace(*(ax).get_xlim())

        ax.plot(x, x, "--k", alpha=0.25, zorder=0)
        ax.plot(
            x,
            params_e.e1 * x + params_e.Intercept,
            label=r"y={:.3g}x+{:.3g}, $R^2$={:.3g}".format(
                params_e.e1, params_e.Intercept, res_e.rsquared
            ),
            alpha=0.5,
        )

        ax.set_xlabel(options.labels[0])
        ax.set_ylabel(options.labels[1])
        ax.legend(loc="lower right")

        if options.title is None:
            fig_title = options.labels[0] + " vs " + options.labels[1]
        else:
            fig_title = options.title
        if options.description:
            fig_title = fig_title + "\n" + options.description
        plt.suptitle(
            r"$\bf{Seq\ Energy\ Compare:}$ " + fig_title, fontsize="large"
        )

        plt.tight_layout()
        plt.savefig(options.output)
        plt.close()


if __name__ == "__main__":
    main()

#!/usr/bin/env python3

# SPDX-FileCopyrightText: 2020 - 2023 sudorook <daemon@nullcodon.com>
#
# SPDX-License-Identifier: GPL-3.0-or-later
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
# for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program. If not, see <https://www.gnu.org/licenses/>.

""" docstring """

import argparse
import random
import numpy as np
import pandas as pd
from scipy.sparse import csr_matrix as sparsify
import matplotlib
import matplotlib.pyplot as plt
from pysca import scaTools as sca
import dcatools as tools

matplotlib.use("Agg")
plt.rcParams["figure.figsize"] = [12, 10]
plt.rcParams.update({"mathtext.default": "regular"})


random.seed(0)
np.random.seed(0)


def parse_options():
    """cli parser"""
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "-n",
        "--msa_basis",
        dest="msa_basis",
        required=True,
        help="numerical msa alignment for basis",
    )
    parser.add_argument(
        "-N",
        "--msa_proj",
        dest="msa_proj",
        required=True,
        help="numerical msa to project",
    )
    parser.add_argument(
        "-w", "--weights_basis", dest="weights_basis", help="msa basis weights"
    )
    parser.add_argument(
        "-W",
        "--weights_proj",
        dest="weights_proj",
        help="msa projection weights",
    )
    parser.add_argument(
        "-b",
        "--basis",
        dest="plot_basis",
        action="store_true",
        default=False,
        help="flag to include basis data in projection",
    )
    parser.add_argument(
        "-o",
        "--output",
        dest="output",
        required=False,
        help="output file name",
    )
    parser.add_argument("-t", "--title", dest="title", help="figure title")
    return parser.parse_args()


def load_sequences(seq_file):
    """load sequences"""
    data = np.loadtxt(seq_file, dtype=np.int16, skiprows=1)
    return data


def load_sequence_weights_input(weight_file):
    """load msa weights_input"""
    return np.loadtxt(weight_file, dtype=np.float32)


def compute_sequence_weights_input(msa, Q=21):
    """comptue seq weights_input"""
    X2d = sca.alg2bin(msa, Q)
    simMat = (X2d.dot(X2d.T)) / msa.shape[1]
    seqw = np.array(1 / (simMat > 0.8).sum(axis=0))
    #  return seqw[0] # ???
    return seqw  # ???


def sample_msa_weighted(msa, weights_input, N):
    """subset the alignment"""
    Ntot = min(int(sum(weights_input)), N)
    wlist = [w for w in weights_input]
    selection2 = np.random.choice(
        range(msa.shape[0]),
        Ntot,
        replace=False,
        p=weights_input / sum(weights_input),
    )
    return msa[selection2, :]


def main():
    """do stuff"""
    options = parse_options()

    msa_basis = load_sequences(options.msa_basis) + 1
    msa_proj = load_sequences(options.msa_proj) + 1

    if options.output is not None:
        outfile_proj = options.output
    else:
        outfile_proj = tools.slugify(options.title) + "_proj.png"

    [M, N] = msa_basis.shape
    if options.weights_basis is not None:
        msa_weights_basis = load_sequence_weights_input(options.weights_basis)
    else:
        msa_weights_basis = np.ones(M)

    [M2, N2] = msa_proj.shape
    if options.weights_proj is not None:
        msa_weights_proj = load_sequence_weights_input(options.weights_proj)
    else:
        msa_weights_proj = np.ones(M2)

    if M > 100000:
        # too many sequences, so subset the alignment and recompute the
        # weights_basis
        print("subsetting the alignment...")
        msa_basis = sample_msa_weighted(msa_basis, msa_weights_basis, 100000)
        msa_weights_basis = compute_sequence_weights_input(msa_basis)
        [M, N] = msa_basis.shape

    # compute eignvectors for the msa
    X2d = sca.alg2binss(msa_basis, 21)
    X2dw = sparsify(np.diag(np.sqrt(msa_weights_basis))).dot(X2d)
    u, s, v = sca.svdss(X2dw, k=6)

    tmp = X2d.dot(v).dot(np.diag(1 / s))
    data_df = pd.DataFrame(data={"PC1": tmp[:, 0], "PC2": tmp[:, 1]})

    # plot the projection of the msa onto the first two eigenvectors
    with plt.style.context("fivethirtyeight"):
        ax = data_df.plot.hexbin(
            x="PC1", y="PC2", mincnt=1, cmap="viridis", zorder=1
        )
        [left, right] = ax.get_xlim()
        [bottom, top] = ax.get_ylim()
        plt.close()

    # project new mcmc onto msa eigenvectors
    X2d_new = sca.alg2bin(msa_proj, 21)
    tmp_new = X2d_new.dot(v).dot(np.diag(1 / s))

    data_df_new = pd.DataFrame(
        data={"PC1": tmp_new[:, 0], "PC2": tmp_new[:, 1]}
    )

    with plt.style.context("fivethirtyeight"):
        ax = plt.gca()
        if options.plot_basis:
            data_df.plot.scatter(
                x="PC1",
                y="PC2",
                zorder=0,
                alpha=0.2,
                ax=ax,
                s=5,
                color="gray",
            )
        data_df_new.plot.hexbin(
            x="PC1",
            y="PC2",
            mincnt=1,
            cmap="viridis",
            zorder=1,
            ax=ax,
            extent=(left, right, bottom, top),
            gridsize=200,
        )
        if options.title is None:
            plt.suptitle("Projection of samples onto MSA space")
        else:
            plt.suptitle(
                r"$\bf{PCA\ Projection:}$ " + options.title, fontsize="large"
            )
        ax.set_xlim(left, right)
        ax.set_ylim(bottom, top)
        plt.tight_layout()
        plt.savefig(outfile_proj)
        plt.close()


if __name__ == "__main__":
    main()

#! /usr/bin/env python3
""" docstring """

import argparse
import os
import sys
import subprocess
import numpy as np
import pandas as pd

import matplotlib

import dcatools as tools

matplotlib.use("Agg")
import matplotlib.pyplot as plt

plt.rcParams.update({"mathtext.default": "regular"})


def parse_options():
    """ cli parser """
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "-s",
        "--steps",
        dest="steps",
        action="append",
        help="steps",
    )
    parser.add_argument(
        "-i",
        "--input",
        dest="input",
        action="append",
        required=False,
        help="input",
    )
    parser.add_argument(
        "-I",
        "--input2",
        dest="input2",
        action="append",
        required=False,
        help="input2",
    )
    parser.add_argument(
        "-d",
        "--dirs",
        dest="dirs",
        action="append",
        required=False,
        help="directories",
    )
    parser.add_argument(
        "-l",
        "--labels",
        dest="labels",
        action="append",
        required=False,
        help="labels",
    )
    parser.add_argument(
        "-t",
        "--title",
        dest="title",
        required=False,
        help="figure title",
    )
    parser.add_argument(
        "-p",
        "--plot_parameters",
        dest="params",
        action="store_true",
        default=False,
        help="compare param flag",
    )
    parser.add_argument(
        "-g",
        "--plot_gradient",
        dest="grad",
        action="store_true",
        default=False,
        help="compare gradient flag",
    )
    parser.add_argument(
        "-r",
        "--plot_learning_rates",
        dest="learn",
        action="store_true",
        default=False,
        help="compare learn rates flag",
    )
    parser.add_argument(
        "-m",
        "--plot_moments",
        dest="moment",
        action="store_true",
        default=False,
        help="compare moments flag",
    )
    parser.add_argument(
        "-v",
        "--vertical",
        dest="vertical",
        action="store_true",
        default=False,
        help="orient plots vertically",
    )
    parser.add_argument(
        "-c",
        "--cleanup",
        dest="cleanup",
        action="store_true",
        default=False,
        help="delete intermediate files",
    )
    parser.add_argument(
        "-b",
        "--bins",
        dest="bins",
        default=101,
        help="number of bins",
    )
    return parser.parse_args()


def load_fit(filename):
    """ load parameters in fit """
    intercept = 0
    slope = 0
    rsquared = 0
    with open(filename, "r") as handle:
        for line in handle:
            if line[0] == "a":
                intercept = float(line.split("\t")[1].strip())
            elif line[0] == "b":
                slope = float(line.split("\t")[1].strip())
            elif line[0] == "R":
                rsquared = float(line.split("\t")[1].strip())
    return intercept, slope, rsquared


def load_histogram_2d(filename, names):
    """ load histogram grid and counts """
    data_df = pd.read_csv(
        filename,
        sep="\t",
        names=names,
        dtype={
            names[0]: np.float64,
            names[1]: np.float64,
            names[2]: np.int64,
        },
    )
    return data_df


def cleanup(filenames):
    """ delete list of files """
    for f in filenames:
        os.remove(f[1][0])
        os.remove(f[1][1])
        os.remove(f[2][0])
        os.remove(f[2][1])


def derive_file_names(model1, model2, model1_J=None, model2_J=None):
    """ Match the output format in compute_histogram2d.cpp """
    if model1_J is not None and model2_J is not None:
        tmp1 = model1.split("/")[-1]
        tmp1 = ".".join(tmp1.split(".")[0:-1])
        tmp2 = model2.split("/")[-1]
        tmp2 = ".".join(tmp2.split(".")[0:-1])
        tmp1 = tmp1.split("_")
        tmp2 = tmp2.split("_")
        tmp = "_".join(
            [tmp1[i] for i, _ in enumerate(tmp1) if tmp1[i] == tmp2[i]]
        )

        values_h_hist = tmp + "_hist.tsv"
        values_h_model = tmp + "_model.tsv"

        tmp1 = model1_J.split("/")[-1]
        tmp1 = ".".join(tmp1.split(".")[0:-1])
        tmp2 = model2_J.split("/")[-1]
        tmp2 = ".".join(tmp2.split(".")[0:-1])
        tmp1 = tmp1.split("_")
        tmp2 = tmp2.split("_")
        tmp = "_".join(
            [tmp1[i] for i, _ in enumerate(tmp1) if tmp1[i] == tmp2[i]]
        )

        values_J_hist = tmp + "_hist.tsv"
        values_J_model = tmp + "_model.tsv"
    else:
        tmp1 = model1.split("/")[-1]
        tmp1 = ".".join(tmp1.split(".")[0:-1])
        tmp2 = model2.split("/")[-1]
        tmp2 = ".".join(tmp2.split(".")[0:-1])
        tmp1 = tmp1.split("_")
        tmp2 = tmp2.split("_")
        tmp = "_".join(
            [tmp1[i] for i, _ in enumerate(tmp1) if tmp1[i] == tmp2[i]]
        )

        tmp = tmp.split("_")
        if len(tmp) > 1:
            values_h_hist = "_".join(tmp[0:-1]) + "_h_" + tmp[-1] + "_hist.tsv"
            values_h_model = "_".join(tmp[0:-1]) + "_h_" + tmp[-1] + "_model.tsv"
            values_J_hist = "_".join(tmp[0:-1]) + "_J_" + tmp[-1] + "_hist.tsv"
            values_J_model = "_".join(tmp[0:-1]) + "_J_" + tmp[-1] + "_model.tsv"
        else:
            values_h_hist = tmp[0] + "_h_hist.tsv"
            values_h_model = tmp[0] + "_h_model.tsv"
            values_J_hist = tmp[0] + "_J_hist.tsv"
            values_J_model = tmp[0] + "_J_model.tsv"

    return values_h_hist, values_h_model, values_J_hist, values_J_model


def main():
    """ do stuff """
    options = parse_options()

    if options.steps is not None:
        if len(options.steps) != 2:
            sys.exit("Provide two steps to compare. Exiting...")
        else:
            step1 = int(options.steps[0])
            step2 = int(options.steps[1])
            file1 = None
            file2 = None
    elif options.input is not None:
        if len(options.input) != 2:
            sys.exit("Provide two input files to compare. Exiting...")
        else:
            file1 = options.input[0]
            file2 = options.input[1]
        if options.input2 is not None:
            if len(options.input2) != 2:
                sys.exit("Provide two input files to compare. Exiting...")
            else:
                file1_J = options.input2[0]
                file2_J = options.input2[1]
        else:
            file1_J = None
            file2_J = None

    if options.dirs is not None:
        if len(options.dirs) == 1:
            if os.path.isdir(options.dirs[0]):
                dir1 = options.dirs[0]
                dir2 = options.dirs[0]
        elif len(options.dirs) == 2:
            if os.path.isdir(options.dirs[0]):
                dir1 = options.dirs[0]
            if os.path.isdir(options.dirs[1]):
                dir2 = options.dirs[1]
        else:
            sys.exit("Invalid number of directories provided. Exiting...")
    else:
        dir1 = ""
        dir2 = ""

    if options.labels is not None:
        if len(options.labels) != 2:
            sys.exit("Invalid number of labels provided. Exiting...")
        else:
            label1 = options.labels[0]
            label2 = options.labels[1]
            if options.steps is not None:
                prefix1 = tools.slugify(options.labels[0])
                prefix2 = tools.slugify(options.labels[1])
            else:
                prefix1 = tools.slugify(options.labels[0])
                prefix2 = tools.slugify(options.labels[1])
    elif options.steps is not None:
        prefix1 = str(options.steps[0])
        prefix2 = str(options.steps[1])
        label1 = "step " + str(options.steps[0])
        label2 = "step " + str(options.steps[1])

    if options.title is not None:
        title = options.title
        title_prefix = tools.slugify(title) + "_model_compare_"
    elif len(options.labels) == 2:
        title = options.labels[0] + " vs " + options.labels[1]
        title_prefix = ""

    if (
        options.grad is False
        and options.params is False
        and options.learn is False
        and options.moment is False
    ):
        if file1 is None or file2 is None:
            sys.exit("Gotta plot something...")

    subplots = []

    if file1 is not None and file2 is not None:
        command = ["compute_histogram2d", "-p", file1, "-q", file2]
        if file1_J is not None and file2_J is not None:
            command.append("-P")
            command.append(file1_J)
            command.append("-Q")
            command.append(file2_J)
        res = subprocess.call(command)
        if res != 0:
            sys.exit("Error generating input histograms. Exiting...")

        if file1_J is not None and file2_J is not None:
            (
                values_h_hist,
                values_h_model,
                values_J_hist,
                values_J_model,
            ) = derive_file_names(file1, file2, file1_J, file2_J)
        else:
            (
                values_h_hist,
                values_h_model,
                values_J_hist,
                values_J_model,
            ) = derive_file_names(file1, file2)

        subplots.append(
            (
                "values",
                [values_h_hist, values_h_model],
                [values_J_hist, values_J_model],
            )
        )
    else:
        if options.params:
            param1_h = os.path.join(
                dir1, "parameters_h_" + str(step1) + ".bin"
            )
            param1_J = os.path.join(
                dir1, "parameters_J_" + str(step1) + ".bin"
            )
            param2_h = os.path.join(
                dir2, "parameters_h_" + str(step2) + ".bin"
            )
            param2_J = os.path.join(
                dir2, "parameters_J_" + str(step2) + ".bin"
            )
            (
                params_h_hist,
                params_h_model,
                params_J_hist,
                params_J_model,
            ) = derive_file_names(param1_h, param2_h, param1_J, param2_J)
            subplots.append(
                (
                    "parameters",
                    [params_h_hist, params_h_model],
                    [params_J_hist, params_J_model],
                )
            )

            command = [
                "compute_histogram2d",
                "-p",
                param1_h,
                "-P",
                param1_J,
                "-q",
                param2_h,
                "-Q",
                param2_J,
            ]
            res = subprocess.call(command)
            if res != 0:
                sys.exit("Error generating parameter histograms. Exiting...")

        if options.grad:
            grad1_h = os.path.join(dir1, "gradients_h_" + str(step1) + ".bin")
            grad1_J = os.path.join(dir1, "gradients_J_" + str(step1) + ".bin")
            grad2_h = os.path.join(dir2, "gradients_h_" + str(step2) + ".bin")
            grad2_J = os.path.join(dir2, "gradients_J_" + str(step2) + ".bin")
            (
                grads_h_hist,
                grads_h_model,
                grads_J_hist,
                grads_J_model,
            ) = derive_file_names(grad1_h, grad2_h, grad1_J, grad2_J)
            subplots.append(
                (
                    "gradients",
                    [grads_h_hist, grads_h_model],
                    [grads_J_hist, grads_J_model],
                )
            )

            command = [
                "compute_histogram2d",
                "-p",
                grad1_h,
                "-P",
                grad1_J,
                "-q",
                grad2_h,
                "-Q",
                grad2_J,
            ]
            res = subprocess.call(command)
            if res != 0:
                sys.exit("Error generating gradient histograms. Exiting...")

        if options.learn:
            param1_h = os.path.join(
                dir1, "learning_rates_h_" + str(step1) + ".bin"
            )
            param1_J = os.path.join(
                dir1, "learning_rates_J_" + str(step1) + ".bin"
            )
            param2_h = os.path.join(
                dir2, "learning_rates_h_" + str(step2) + ".bin"
            )
            param2_J = os.path.join(
                dir2, "learning_rates_J_" + str(step2) + ".bin"
            )
            (
                params_h_hist,
                params_h_model,
                params_J_hist,
                params_J_model,
            ) = derive_file_names(param1_h, param2_h, param1_J, param2_J)
            subplots.append(
                (
                    "learning_rates",
                    [params_h_hist, params_h_model],
                    [params_J_hist, params_J_model],
                )
            )

            command = [
                "compute_histogram2d",
                "-p",
                param1_h,
                "-P",
                param1_J,
                "-q",
                param2_h,
                "-Q",
                param2_J,
            ]
            res = subprocess.call(command)
            if res != 0:
                sys.exit(
                    "Error generating learning rate histograms. Exiting..."
                )

        if options.moment:
            moment1_h = os.path.join(dir1, "moment1_h_" + str(step1) + ".bin")
            moment1_J = os.path.join(dir1, "moment1_J_" + str(step1) + ".bin")
            moment2_h = os.path.join(dir2, "moment1_h_" + str(step2) + ".bin")
            moment2_J = os.path.join(dir2, "moment1_J_" + str(step2) + ".bin")
            (
                moments_h_hist,
                moments_h_model,
                moments_J_hist,
                moments_J_model,
            ) = derive_file_names(moment1_h, moment2_h, moment1_J, moment2_J)
            subplots.append(
                (
                    "moment1",
                    [moments_h_hist, moments_h_model],
                    [moments_J_hist, moments_J_model],
                )
            )

            command = [
                "compute_histogram2d",
                "-p",
                moment1_h,
                "-P",
                moment1_J,
                "-q",
                moment2_h,
                "-Q",
                moment2_J,
            ]
            res = subprocess.call(command)
            if res != 0:
                sys.exit("Error generating moment 1 histograms. Exiting...")

    subplots_count = len(subplots)

    with plt.style.context("fivethirtyeight"):
        if options.vertical:
            fig = plt.figure(figsize=[20, 8 * subplots_count])
        else:
            fig = plt.figure(figsize=[8 * subplots_count, 14])
        axes = fig.add_subplot(111)
        axes.tick_params(
            axis="both",
            which="both",
            labelcolor="none",
            top=False,
            bottom=False,
            left=False,
            right=False,
        )
        axes.grid(False)
        axes.set_title(title, pad=25)
        axes.set_xlabel(
            label1, fontsize=plt.rcParams["axes.titlesize"], x=0.475, y=0
        )
        axes.set_ylabel(
            label2, fontsize=plt.rcParams["axes.titlesize"], x=0, y=0.5
        )
        if options.vertical:
            axes.yaxis.labelpad = 20

        for idx, s in enumerate(subplots):
            h = load_histogram_2d(s[1][0], names=[label1, label2, "Count"])
            J = load_histogram_2d(s[2][0], names=[label1, label2, "Count"])

            h_a, h_b, h_r2 = load_fit(s[1][1])
            J_a, J_b, J_r2 = load_fit(s[2][1])

            if options.vertical:
                ax = fig.add_subplot(
                    int(str(subplots_count) + "2" + str(2 * idx + 1))
                )
            else:
                ax = fig.add_subplot(
                    int("2" + str(subplots_count) + str(idx + 1))
                )

            ax.grid(False)
            hist = ax.hist2d(
                x=h[label1],
                y=h[label2],
                weights=h["Count"],
                bins=[options.bins, options.bins],
                cmin=1,
                cmap="viridis",
                zorder=1,
                norm=matplotlib.colors.LogNorm(),
            )
            xmin, xmax = (ax).get_xlim()
            ymin, ymax = (ax).get_ylim()
            ax.set_xlim([min(xmin, ymin), max(xmax, ymax)])
            ax.set_ylim([min(xmin, ymin), max(xmax, ymax)])
            x = np.linspace(min(xmin, ymin), max(xmax, ymax))
            plt.grid(zorder=0)
            plt.colorbar(hist[3])
            ax.plot(
                x,
                h_b * x + h_a,
                label=r"y={:.3g}x+{:.3g}, $R^2$={:.3g}".format(h_b, h_a, h_r2),
                alpha=0.5,
            )
            ax.plot(x, x, "--k", alpha=0.25, zorder=0, label=r"y=x")
            ax.set_title(
                s[0] + " h",
                fontsize=plt.rcParams["axes.titlesize"],
            )
            ax.grid(True)
            ax.set_xlabel("")
            ax.set_ylabel("")
            ax.legend(loc="lower right")

            if options.vertical:
                ax = fig.add_subplot(
                    int(str(subplots_count) + "2" + str(2 * idx + 2))
                )
            else:
                ax = fig.add_subplot(
                    int(
                        "2"
                        + str(subplots_count)
                        + str(idx + 1 + subplots_count)
                    )
                )

            ax.grid(False)
            hist = ax.hist2d(
                x=J[label1],
                y=J[label2],
                weights=J["Count"],
                bins=[options.bins, options.bins],
                cmin=1,
                cmap="viridis",
                zorder=1,
                norm=matplotlib.colors.LogNorm(),
            )

            xmin, xmax = (ax).get_xlim()
            ymin, ymax = (ax).get_ylim()
            ax.set_xlim([min(xmin, ymin), max(xmax, ymax)])
            ax.set_ylim([min(xmin, ymin), max(xmax, ymax)])
            x = np.linspace(min(xmin, ymin), max(xmax, ymax))
            plt.grid(zorder=0)
            plt.colorbar(hist[3])
            ax.plot(
                x,
                J_b * x + J_a,
                label=r"y={:.3g}x+{:.3g}, $R^2$={:.3g}".format(J_b, h_a, J_r2),
                alpha=0.5,
            )
            ax.plot(x, x, "--k", alpha=0.25, zorder=0, label=r"y=x")
            ax.set_title(
                s[0] + " J",
                fontsize=plt.rcParams["axes.titlesize"],
            )
            ax.grid(True)
            ax.set_xlabel("")
            ax.set_ylabel("")
            ax.legend(loc="lower right")

        fig.tight_layout()
        fig.savefig(title_prefix + prefix1 + "_vs_" + prefix2 + ".png")

    if options.cleanup:
        cleanup(subplots)


if __name__ == "__main__":
    main()

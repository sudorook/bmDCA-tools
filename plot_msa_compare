#! /usr/bin/env python3
""" docstring """

import os
import sys
import re
import subprocess
import argparse
import unidecode
import numpy as np
import pandas as pd
import matplotlib

matplotlib.use("Agg")
import matplotlib.pyplot as plt

plt.rcParams["figure.figsize"] = [10, 7.5]


def parse_options():
    """ cli parser """
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "-i",
        "--msa1",
        dest="msa1",
        required=False,
        default="",
        help="input msa 1",
    )
    parser.add_argument(
        "-I",
        "--msa2",
        dest="msa2",
        required=False,
        default="",
        help="input msa 2",
    )
    parser.add_argument(
        "-n",
        "--numeric_msa1",
        dest="num_msa1",
        default="",
        required=False,
        help="numeric msa 1",
    )
    parser.add_argument(
        "-N",
        "--numeric_msa2",
        dest="num_msa2",
        default="",
        required=False,
        help="numeric msa 2",
    )
    parser.add_argument(
        "-w",
        "--weights_msa1",
        dest="weights1",
        required=False,
        default="",
        help="msa 1 weights",
    )
    parser.add_argument(
        "-W",
        "--weights_msa2",
        dest="weights2",
        required=False,
        default="",
        help="msa 2 weights",
    )
    parser.add_argument(
        "-r",
        "--reweight1",
        dest="reweight1",
        action="store_true",
        default=False,
        help="reweight msa 1",
    )
    parser.add_argument(
        "-R",
        "--reweight2",
        dest="reweight2",
        action="store_true",
        default=False,
        help="reweight msa 2",
    )
    parser.add_argument(
        "-t",
        "--threshold",
        dest="threshold",
        required=False,
        default=0.8,
        type=float,
        help="sequence similarity threshold for reweighting",
    )
    parser.add_argument(
        "-l", "--xlabel", dest="xlabel", required=True, help="x axis label",
    )
    parser.add_argument(
        "-L", "--ylabel", dest="ylabel", required=True, help="y axis label",
    )
    parser.add_argument(
        "-T", "--title", dest="title", required=True, help="title"
    )
    parser.add_argument(
        "-b",
        "--bins",
        dest="bins",
        default=201,
        help="number of bins",
        type=int,
    )
    parser.add_argument(
        "-d",
        "--dest",
        dest="destination",
        required=False,
        help="figure output name",
    )
    parser.add_argument(
        "-p",
        "--positions",
        dest="n",
        default=2,
        type=int,
        required=False,
        help="number of n-body interactions to compute",
    )
    parser.add_argument(
        "-c",
        "--cleanup",
        dest="cleanup",
        action="store_true",
        default=False,
        help="delete intermediate files",
    )
    parser.add_argument(
        "-s",
        "--skip",
        dest="skip",
        action="store_true",
        default=False,
        help="skip processing and plot existing output",
    )
    return parser.parse_args()


def load_fit(filename):
    """ load parameters in fit """
    intercept = 0
    slope = 0
    rsquared = 0
    with open(filename, "r") as handle:
        for line in handle:
            if line[0] == "a":
                intercept = float(line.split("\t")[1].strip())
            elif line[0] == "b":
                slope = float(line.split("\t")[1].strip())
            elif line[0] == "R":
                rsquared = float(line.split("\t")[1].strip())
    return intercept, slope, rsquared


def load_grid(filename, names):
    """ load histogram grid and counts """
    data_df = pd.read_csv(
        filename,
        sep="\t",
        names=names,
        dtype={
            names[0]: np.float64,
            names[1]: np.float64,
            names[2]: np.int64,
        },
    )
    return data_df


def slugify(text):
    """ convert text string to slug """
    text = unidecode.unidecode(text).lower()
    return re.sub(r"[\W_]+", "_", text)


def cleanup(filenames):
    """ delete list of files """
    for f in filenames:
        os.remove(f[1] + "_hist.tsv")
        os.remove(f[1] + "_model.tsv")


def main():
    """ do stuff """
    options = parse_options()

    if options.destination is None:
        destination = os.getcwd()
    else:
        destination = os.path.abspath(options.destination)

    if not os.path.exists(destination):
        os.makedirs(destination)

    command = ["compare_msa_stats"]

    if options.reweight1:
        command.append("-r")
    elif options.weights1:
        command.append("-w")
        command.append(options.weights1)

    if options.reweight2:
        command.append("-R")
    elif options.weights2:
        command.append("-W")
        command.append(options.weights2)

    command.append("-p")
    command.append(str(options.n))

    if options.num_msa1:
        command.append("-n")
        command.append(options.num_msa1)
    elif options.msa1:
        command.append("-i")
        command.append(options.msa1)

    if options.num_msa2:
        command.append("-N")
        command.append(options.num_msa2)
    elif options.msa2:
        command.append("-I")
        command.append(options.msa2)

    command.append("-t")
    command.append(str(options.threshold))

    #  print(command)

    if options.skip is False:
        res = subprocess.call(command)
        if res != 0:
            sys.exit(1)

    prefix = slugify(options.title)

    filenames = []
    for i in range(1, options.n + 1):
        if i == 1:
            filenames.append(
                [str(i) + "p freq", "freq_" + str(i) + "p",]
            )
        else:
            filenames.append(
                [str(i) + "p freq", "freq_" + str(i) + "p",]
            )
            filenames.append(
                [str(i) + "p corr", "corr_" + str(i) + "p",]
            )

    for files in filenames:
        data_df = load_grid(
            filename=files[1] + "_hist.tsv",
            names=[options.xlabel, options.ylabel, "Count"],
        )
        a, b, r2 = load_fit(files[1] + "_model.tsv")
        outputname = prefix + "_" + files[1] + ".png"

        with plt.style.context("fivethirtyeight"):
            fig, ax = plt.subplots()
            h = ax.hist2d(
                x=data_df[options.xlabel],
                y=data_df[options.ylabel],
                weights=data_df["Count"],
                bins=[options.bins, options.bins],
                zorder=1,
                cmin=1,
                norm=matplotlib.colors.LogNorm(),
            )
            x = np.linspace(*ax.get_xlim())
            plt.grid(zorder=0)
            plt.colorbar(h[3])
            ax.set_xlabel(options.xlabel)
            ax.set_ylabel(options.ylabel)
            if a != 0:
                label = r"y={:.3g}x+{:.3g}, $R^2$={:.3g}".format(b, a, r2)
            else:
                label = r"y={:.3g}x, $R^2$={:.3g}".format(b, r2)
            ax.plot(
                x, b * x + a, label=label, alpha=0.5,
            )
            ax.plot(x, x, "--k", alpha=0.25, zorder=0, label=r"y=x")
            plt.legend(loc="upper left")
            plt.title(files[0] + ": " + options.title)
            plt.tight_layout()
            plt.savefig(outputname)
            #  plt.savefig(prefix + "_freq_" + str(i) + "p.png")
            plt.close()

    if options.cleanup:
        cleanup(filenames)


if __name__ == "__main__":
    main()
